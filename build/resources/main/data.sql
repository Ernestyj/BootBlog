/*Data for the table `admin` */

insert  into `admin`(`username`,`password`,`email`,`github`,`twitter`,`md`,`resume`,`avatar`) values ('admin','21232f297a57a5a743894a0e4a801fc3','#','#','#','### 联系方式\r\n- **Email：** jcalaz@163.com\r\n- ** QQ：** 1142966796\r\n\r\n---\r\n\r\n###个人信息\r\n- **姓名：** 左志鹏\r\n- **性别：** 男\r\n- **学历：** 西南交通大学(2013-2017)本科，信息科学与技术学院电科专业\r\n- **技术博客：** http://www.jcala.me\r\n- **Github：** https://github.com/jcalaz\r\n- **工作年限：** 半年\r\n- **期望职位：**java web开发工程师,java后端工程师\r\n- **期望城市：**成都,天津,北京\r\n- **期望薪资：**7K-10K\r\n\r\n---\r\n\r\n###优势\r\n1. 虽未正式毕业，大大小小做了七八个项目，具有开发经验。项目包括本博客系统，两个省创SRTP(安卓项目)，自己做的java restful小框架，自制JVM语言等。\r\n2. 爱好编程。学习编程并不但是为了工作，更因为感兴趣，因此对编程工作充满激情。还养成了平均熬夜到两三点编程的习惯...\r\n3. 学习快速。比如在刚学习java一个月，学习安卓几天的时候，用不到两周时间帮助学姐完成省创SRTP，约占整个公交拼车APP工作量的百分之五十。\r\n4. 爱好新技术。课余时间天天看博客，推酷，开发者头条等，接触到大量新的技术，并且学以致用。比如Docker发布半年时就学习使用了Docker，使用SpringBoot加快网站开发速度，使用netty而不是普通tomcat做并发大的rest，websocket服务器。并且接触学习了scala和goLang新兴语言。\r\n5. 注重基础。算法，JDK库，设计模式，HTTP，JVM参数调优等都花了大量时间学习，并且还会mybatis,springBoot等常用框架的优化。\r\n6. 协作意识。擅长使用git协同开发软件。\r\n\r\n---\r\n\r\n###技能\r\n1. 框架: netty,SpringBoot,SpringIOC,SpringMVC,Spring data mongo,mybatis\r\n2. 工具包：lombook，java8\r\n3. 模板引擎：velocity，jsp\r\n4. 日志系统：logback,slf4j,log4j\r\n5. web容器：undertow，tomcat\r\n6. json处理：gson，jackson\r\n7. 单元测试：junit,spring test\r\n8. web：jquery,js,bootstrap,vue\r\n9. 数据库：mysql,mongoDB\r\n10. 版本控制：git\r\n11. 构建系统： gradle，maven\r\n12. 爬虫：jsoup\r\n13. 编程语言: java,scala,goLang\r\n14. 全文检索：lucene\r\n15. 缓存系统：ecache\r\n16. 定时任务：Quartz\r\n17. 压力测试：jmeter\r\n18. 持续集成：jenkins\r\n19. 数据库连接池：HikariCP\r\n20. 其他：Docker，JVM监控，阿里云linux上应用部署等\r\n\r\n---\r\n\r\n###工作经历\r\n####北京丰天科技(2016年3月~)\r\n1. 维护服务器，宕机宠重启等工作。\r\n2. 把公司静态网站全站抓取，部署到阿里云服务器，使用了nignx。\r\n2. 将go语言做的HTTP，websocket服务器转换为java。为了满足以后存在的高并发要求，将基于beego的程序转换为基于netty的程序，并使用了spring data mongo,springIOC,mybatis等技术。由于硬件端与服务器端需要存储到状态，而netty框架没有session，便想到使用缓存来模拟session，还想到了使用过的框架Play framework，便在查看Play!源码后完成了session的实现。在接收HTTP后，需要根据HTTP请求分发到不同方法，但是netty中没有包含路由功能，自己在查看tomcat和play!后用正则完成了路由功能。程序在测试的时候，发现运行时间长后就会变得异常慢，便用VisualVM监控JVM，发现了spring data mongo使用不当，造成每次websocket请求都会启用新的mongo连接线程的问题，修改程序使程序能够健康运行，至今没有发生内存泄漏,宕机等问题。\r\n','<h3 id=\"h3-u8054u7CFBu65B9u5F0F\"><a name=\"联系方式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>联系方式</h3><ul>\r\n<li><strong>Email：</strong> <a href=\"mailto:jcalaz@163.com\">jcalaz@163.com</a></li><li><strong> QQ：</strong> 1142966796</li></ul>\r\n<hr>\r\n<h3 id=\"h3-u4E2Au4EBAu4FE1u606F\"><a name=\"个人信息\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>个人信息</h3><ul>\r\n<li><strong>姓名：</strong> 左志鹏</li><li><strong>性别：</strong> 男</li><li><strong>学历：</strong> 西南交通大学(2013-2017)本科，信息科学与技术学院电科专业</li><li><strong>技术博客：</strong> <a href=\"http://www.jcala.me\">http://www.jcala.me</a></li><li><strong>Github：</strong> <a href=\"https://github.com/jcalaz\">https://github.com/jcalaz</a></li><li><strong>工作年限：</strong> 半年</li><li><strong>期望职位：</strong>java web开发工程师,java后端工程师</li><li><strong>期望城市：</strong>成都,天津,北京</li><li><strong>期望薪资：</strong>7K-10K</li></ul>\r\n<hr>\r\n<h3 id=\"h3-u4F18u52BF\"><a name=\"优势\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>优势</h3><ol>\r\n<li>虽未正式毕业，大大小小做了七八个项目，具有开发经验。项目包括本博客系统，两个省创SRTP(安卓项目)，自己做的java restful小框架，自制JVM语言等。</li><li>爱好编程。学习编程并不但是为了工作，更因为感兴趣，因此对编程工作充满激情。还养成了平均熬夜到两三点编程的习惯…</li><li>学习快速。比如在刚学习java一个月，学习安卓几天的时候，用不到两周时间帮助学姐完成省创SRTP，约占整个公交拼车APP工作量的百分之五十。</li><li>爱好新技术。课余时间天天看博客，推酷，开发者头条等，接触到大量新的技术，并且学以致用。比如Docker发布半年时就学习使用了Docker，使用SpringBoot加快网站开发速度，使用netty而不是普通tomcat做并发大的rest，websocket服务器。并且接触学习了scala和goLang新兴语言。</li><li>注重基础。算法，JDK库，设计模式，HTTP，JVM参数调优等都花了大量时间学习，并且还会mybatis,springBoot等常用框架的优化。</li><li>协作意识。擅长使用git协同开发软件。</li></ol>\r\n<hr>\r\n<h3 id=\"h3-u6280u80FD\"><a name=\"技能\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>技能</h3><ol>\r\n<li>框架: netty,SpringBoot,SpringIOC,SpringMVC,Spring data mongo,mybatis</li><li>工具包：lombook，java8</li><li>模板引擎：velocity，jsp</li><li>日志系统：logback,slf4j,log4j</li><li>web容器：undertow，tomcat</li><li>json处理：gson，jackson</li><li>单元测试：junit,spring test</li><li>web：jquery,js,bootstrap,vue</li><li>数据库：mysql,mongoDB</li><li>版本控制：git</li><li>构建系统： gradle，maven</li><li>爬虫：jsoup</li><li>编程语言: java,scala,goLang</li><li>全文检索：lucene</li><li>缓存系统：ecache</li><li>定时任务：Quartz</li><li>压力测试：jmeter</li><li>持续集成：jenkins</li><li>数据库连接池：HikariCP</li><li>其他：Docker，JVM监控，阿里云linux上应用部署等</li></ol>\r\n<hr>\r\n<h3 id=\"h3-u5DE5u4F5Cu7ECFu5386\"><a name=\"工作经历\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>工作经历</h3><h4 id=\"h4--2016-3-\"><a name=\"北京丰天科技(2016年3月~)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>北京丰天科技(2016年3月~)</h4><ol>\r\n<li>维护服务器，宕机宠重启等工作。</li><li>把公司静态网站全站抓取，部署到阿里云服务器，使用了nignx。</li><li>将go语言做的HTTP，websocket服务器转换为java。为了满足以后存在的高并发要求，将基于beego的程序转换为基于netty的程序，并使用了spring data mongo,springIOC,mybatis等技术。由于硬件端与服务器端需要存储到状态，而netty框架没有session，便想到使用缓存来模拟session，还想到了使用过的框架Play framework，便在查看Play!源码后完成了session的实现。在接收HTTP后，需要根据HTTP请求分发到不同方法，但是netty中没有包含路由功能，自己在查看tomcat和play!后用正则完成了路由功能。程序在测试的时候，发现运行时间长后就会变得异常慢，便用VisualVM监控JVM，发现了spring data mongo使用不当，造成每次websocket请求都会启用新的mongo连接线程的问题，修改程序使程序能够健康运行，至今没有发生内存泄漏,宕机等问题。</li></ol>\r\n','http://127.0.0.1:8090/img/20168/1474817524426.jpg');

/*Data for the table `blog_view` */

insert  into `blog_view`(`vid`,`date`,`title`,`article`,`tags`,`md`) values (23,'2016-09-10','springBoot整合mybatis','<h4 id=\"h4--mybatis-\"><a name=\"为什么使用Mybatis？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>为什么使用Mybatis？</h4><blockquote>\r\n<p>Mybatis是目前很火的SSM框架中的ORM组件，相比Hibernate更加灵活小巧，学习成本也更低，我觉得可维护性也更好些。</p>\r\n</blockquote>\r\n<p>但是spring boot官方更只提供了自家的spring data jpa及hibernate的整合方案，而没有给出Mybatis的整合组件。于是上Github，发现了Mybatis提供了它的spring-boot-starter。</p>\r\n<h2 id=\"h2-u6574u5408u65B9u6CD5\"><a name=\"整合方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>整合方法</h2><ol>\r\n<li><h4 id=\"h4-gradle-\"><a name=\"gradle中加入依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>gradle中加入依赖</h4><pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-groovy\"><span class=\"pln\">compile</span><span class=\"pun\">(</span><span class=\"str\">\"org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1\"</span><span class=\"pun\">)</span></code></li></ol></pre>\r\n<h6 id=\"h6-spring-boot-mybatis-spring-boot-starter-mybatis-mybatis-spring-\"><a name=\"spring.boot:mybatis-spring-boot-starter中已经包含了对mybatis和mybatis-spring的依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>spring.boot:mybatis-spring-boot-starter中已经包含了对mybatis和mybatis-spring的依赖</h6></li><li><h4 id=\"h4--application-yml-mybatis\"><a name=\"在application.yml中配置mybatis\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>在application.yml中配置mybatis</h4><pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">mybatis</span><span class=\"pun\">:</span></code></li><li class=\"L1\"><code><span class=\"pln\"> </span><span class=\"com\">#指定mapper和domain(实体)所在的包</span></code></li><li class=\"L2\"><code><span class=\"pln\"> type</span><span class=\"pun\">-</span><span class=\"pln\">aliases</span><span class=\"pun\">-</span><span class=\"kwd\">package</span><span class=\"pun\">:</span><span class=\"pln\"> me</span><span class=\"pun\">.</span><span class=\"pln\">jcala</span><span class=\"pun\">.</span><span class=\"pln\">blog</span><span class=\"pun\">.</span><span class=\"pln\">domain</span><span class=\"pun\">,</span><span class=\"pln\">me</span><span class=\"pun\">.</span><span class=\"pln\">jcala</span><span class=\"pun\">.</span><span class=\"pln\">blog</span><span class=\"pun\">.</span><span class=\"pln\">mapping</span></code></li><li class=\"L3\"><code><span class=\"pln\"> </span><span class=\"com\">#指定使用的类型转换器</span></code></li><li class=\"L4\"><code><span class=\"pln\"> type</span><span class=\"pun\">-</span><span class=\"pln\">handlers</span><span class=\"pun\">-</span><span class=\"kwd\">package</span><span class=\"pun\">:</span><span class=\"pln\"> org</span><span class=\"pun\">.</span><span class=\"pln\">apache</span><span class=\"pun\">.</span><span class=\"pln\">ibatis</span><span class=\"pun\">.</span><span class=\"pln\">type</span><span class=\"pun\">.</span><span class=\"typ\">LocalDateTypeHandler</span></code></li></ol></pre><p>除此之外mybatis还提供了一下配置</p>\r\n<pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">mybatis</span><span class=\"pun\">:</span></code></li><li class=\"L1\"><code><span class=\"pln\"> config</span><span class=\"pun\">-</span><span class=\"pln\">location</span><span class=\"pun\">:</span><span class=\"pln\">    </span><span class=\"com\">#mybatis的xml注册文件位置</span></code></li><li class=\"L2\"><code><span class=\"pln\"> mapper</span><span class=\"pun\">-</span><span class=\"pln\">locations</span><span class=\"pun\">:</span><span class=\"pln\">   </span><span class=\"com\">#Mapper xml config files (optional)</span></code></li><li class=\"L3\"><code><span class=\"pln\"> executor</span><span class=\"pun\">-</span><span class=\"pln\">type</span><span class=\"pun\">:</span><span class=\"pln\">      </span><span class=\"com\">#执行类型为: SIMPLE, REUSE还是BATCH</span></code></li><li class=\"L4\"><code><span class=\"pln\"> configuration</span><span class=\"pun\">:</span><span class=\"pln\">      </span><span class=\"com\">#mybatis的其他配置</span></code></li></ol></pre></li><li><h4 id=\"h4--spring-boot-datasource\"><a name=\"在Spring Boot中配置好数据源DataSource\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>在Spring Boot中配置好数据源DataSource</h4>可以使用任意数据源，mybatis会自动使用spring boot中所配置的数据库连接池</li></ol>\r\n<p>以上就完成了spring boot对mybatis的整合，超级简单啊</p>\r\n<h2 id=\"h2-u6D4Bu8BD5u4E00u4E0B\"><a name=\"测试一下\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试一下</h2><p>因为在type-aliases-package: me.jcala.blog.domain,me.jcala.blog.mapping中指定的mapping扫描包为me.jcala.blog.mapping，所以要把写的mapper放到me.jcala.blog.mapping包下。</p>\r\n<h4 id=\"h4--me-jcala-blog-mapping-testmapper-\"><a name=\"在me.jcala.blog.mapping下新建一个TestMapper接口\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>在me.jcala.blog.mapping下新建一个TestMapper接口</h4><pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"lit\">@Repository</span></code></li><li class=\"L1\"><code class=\"lang-java\"><span class=\"lit\">@Mapper</span></code></li><li class=\"L2\"><code class=\"lang-java\"><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">interface</span><span class=\"pln\"> </span><span class=\"typ\">TestMapper</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code class=\"lang-java\"><span class=\"pln\">    </span><span class=\"lit\">@Insert</span><span class=\"pun\">(</span><span class=\"str\">\"insert into users set username=\'zzp\',password=\'zzp105\'\"</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code class=\"lang-java\"><span class=\"pln\">    </span><span class=\"kwd\">void</span><span class=\"pln\"> insert</span><span class=\"pun\">();</span></code></li><li class=\"L5\"><code class=\"lang-java\"><span class=\"pun\">}</span></code></li></ol></pre>\r\n<h4 id=\"h4-u518Du968Fu4FBFu5199u4E00u4E2Au6D4Bu8BD5u7684u7C7B\"><a name=\"再随便写一个测试的类\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>再随便写一个测试的类</h4><pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">TestForMapper</span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"lit\">@Autowired</span></code></li><li class=\"L2\"><code><span class=\"typ\">TestMapper</span><span class=\"pln\"> testMapper</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code><span class=\"lit\">@Test</span></code></li><li class=\"L4\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> testInsert</span><span class=\"pun\">(){</span></code></li><li class=\"L5\"><code><span class=\"pln\">      testMapper</span><span class=\"pun\">.</span><span class=\"pln\">insert</span><span class=\"pun\">();</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pun\">}</span></code></li></ol></pre>','spring,springBoot,java,mybatis','#### 为什么使用Mybatis？\r\n> Mybatis是目前很火的SSM框架中的ORM组件，相比Hibernate更加灵活小巧，学习成本也更低，我觉得可维护性也更好些。\r\n\r\n但是spring boot官方更只提供了自家的spring data jpa及hibernate的整合方案，而没有给出Mybatis的整合组件。于是上Github，发现了Mybatis提供了它的spring-boot-starter。\r\n##整合方法\r\n\r\n1. #### gradle中加入依赖\r\n```groovy\r\ncompile(\"org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1\")\r\n```\r\n###### spring.boot:mybatis-spring-boot-starter中已经包含了对mybatis和mybatis-spring的依赖\r\n\r\n2. #### 在application.yml中配置mybatis\r\n```\r\nmybatis:\r\n    #指定mapper和domain(实体)所在的包\r\n    type-aliases-package: me.jcala.blog.domain,me.jcala.blog.mapping\r\n    #指定使用的类型转换器\r\n    type-handlers-package: org.apache.ibatis.type.LocalDateTypeHandler\r\n```\r\n除此之外mybatis还提供了一下配置\r\n```\r\nmybatis:\r\n	config-location:	#mybatis的xml注册文件位置\r\n	mapper-locations:   #Mapper xml config files (optional)\r\n	executor-type:	  #执行类型为: SIMPLE, REUSE还是BATCH\r\n	configuration:      #mybatis的其他配置\r\n```\r\n3. #### 在Spring Boot中配置好数据源DataSource\r\n   可以使用任意数据源，mybatis会自动使用spring boot中所配置的数据库连接池\r\n\r\n以上就完成了spring boot对mybatis的整合，超级简单啊\r\n\r\n## 测试一下\r\n因为在type-aliases-package: me.jcala.blog.domain,me.jcala.blog.mapping中指定的mapping扫描包为me.jcala.blog.mapping，所以要把写的mapper放到me.jcala.blog.mapping包下。\r\n#### 在me.jcala.blog.mapping下新建一个TestMapper接口\r\n```java\r\n@Repository\r\n@Mapper\r\npublic interface TestMapper {\r\n    @Insert(\"insert into users set username=\'zzp\',password=\'zzp105\'\")\r\n    void insert();\r\n}\r\n```\r\n#### 再随便写一个测试的类\r\n```\r\npublic class TestForMapper{\r\n@Autowired\r\nTestMapper testMapper;\r\n@Test\r\npublic void testInsert(){\r\n      testMapper.insert();\r\n	}\r\n}\r\n```'),(24,'2016-09-27','jcala_blog测试博客','<h2 id=\"h2-jcala_blog-\"><a name=\"jcala_blog测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>jcala_blog测试</h2><h3 id=\"h3-u91C7u7528u7684u6280u672F\"><a name=\"采用的技术\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>采用的技术</h3><blockquote>\r\n<p>springBoot+spring MVC+mybatis+udertow+velocity+bootstrap+spring事务+mysql</p>\r\n</blockquote>\r\n','blog,测试','## jcala_blog测试\r\n\r\n###采用的技术\r\n> springBoot+spring MVC+mybatis+udertow+velocity+bootstrap+spring事务+mysql');

/*Data for the table `project` */

insert  into `project`(`id`,`name`,`url`,`tech`,`desp`,`date`) values (1,'jcalaBlog','https://github.com/jcalaz/jcalaBlog','spring Boot/MVC/JPA + Hibernate + MySQL + Redis + Bootstrap + Jade','SpringBlog is a very simple and clean-design blog system implemented with Spring Boot. It is one of my learning projects to explore awesome features in Spring Boot web programming. It is also the source code of my blog site.','2016-09-16 18:54:48'),(2,'demo','#','scala+java','这是一个测试的demo,测试jcala_blog是否正常工作。','2016-09-27 20:22:32');

/*Data for the table `view_tag` */

insert  into `view_tag`(`name`,`vid`) values ('java',23),('mybatis',23),('spring',23),('springBoot',23),('blog',24),('测试',24);